import moment from 'moment-timezone';

var handler = async (m, { conn }) => {
    // Obtener referencia al usuario
    let user = global.db.data.users[m.sender];
    let name = conn.getName(m.sender);
    
    // Calcular recompensas con bonificaciones basadas en nivel
    let nivel = user.level || 1;
    let multiplier = 1 + (nivel * 0.05); // Bonificaci√≥n de 5% por nivel
    
    // Calcular recompensas base aleatorias
    let coin = Math.floor((Math.random() * (500 - 100 + 1)) + 100);
    let exp = Math.floor((Math.random() * (500 - 100 + 1)) + 100);
    let diamond = Math.floor((Math.random() * (500 - 100 + 1)) + 100);
    
    // Aplicar multiplicador basado en nivel
    coin = Math.floor(coin * multiplier);
    exp = Math.floor(exp * multiplier);
    diamond = Math.floor(diamond * multiplier);
    
    // Bonificaci√≥n para usuarios premium
    if (user.premium) {
        coin *= 2;
        exp *= 2;
        diamond *= 2;
    }
    
    // Verificar si puede reclamar recompensas diarias
    let cooldown = 86400000; // 24 horas en milisegundos
    let lastClaim = user.lastclaim || 0;
    let now = new Date();
    let availableAt = lastClaim + cooldown;
    
    // Verificar si el usuario est√° en cooldown
    if (now < availableAt) {
        // Si est√° en cooldown, mostrar tiempo restante
        let timeRemaining = msToTime(availableAt - now);
        
        let cooldownMessage = `*‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ ‚è∞ RECOMPENSA EN ESPERA ‚è∞ ‚ù±‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ*
*‚îÉ*
*‚îÉ* *${emoji4} ¬°Ya reclamaste tu recompensa diaria!*
*‚îÉ* 
*‚îÉ* *‚è≥ Tiempo restante:* ${timeRemaining}
*‚îÉ*
*‚îÉ* *üìÜ Pr√≥xima recompensa disponible:*
*‚îÉ* ${moment(availableAt).format('DD/MM/YYYY HH:mm:ss')}
*‚îÉ*
*‚îÉ* *üí° Consejo:* Mientras esperas, puedes
*‚îÉ* jugar minijuegos o interactuar con el bot
*‚îÉ* para ganar m√°s recompensas.
*‚îÉ*
*‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ*`;
        
        return conn.reply(m.chat, cooldownMessage, m);
    }
    
    // Generar eventos aleatorios para hacer m√°s interesante la recompensa
    let events = [
        {name: "Racha de suerte", bonus: {coin: 250, exp: 150, diamond: 50}, chance: 0.15},
        {name: "Tesoro encontrado", bonus: {coin: 500, exp: 0, diamond: 100}, chance: 0.10},
        {name: "Inspiraci√≥n repentina", bonus: {coin: 0, exp: 300, diamond: 0}, chance: 0.20},
        {name: "Gema brillante", bonus: {coin: 0, exp: 0, diamond: 200}, chance: 0.05}
    ];
    
    // Seleccionar evento aleatorio si hay suerte
    let specialEvent = null;
    let randomValue = Math.random();
    for (let event of events) {
        if (randomValue <= event.chance) {
            specialEvent = event;
            
            // Aplicar bonus del evento
            coin += event.bonus.coin;
            exp += event.bonus.exp;
            diamond += event.bonus.diamond;
            break;
        }
    }
    
    // Aplicar las recompensas al usuario
    user.diamond += diamond;
    user.coin += coin;
    user.exp += exp;
    user.lastclaim = now.getTime();
    
    // Calcular racha de d√≠as
    let streak = user.dailyStreak || 0;
    let lastClaimDate = lastClaim ? new Date(lastClaim) : null;
    let yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);
    
    // Comprobar si el √∫ltimo reclamo fue ayer
    if (lastClaimDate && lastClaimDate.toDateString() === yesterday.toDateString()) {
        streak++;
        
        // Bonificaci√≥n por racha
        if (streak % 7 === 0) {
            // Bonificaci√≥n especial cada 7 d√≠as
            let streakBonus = streak * 10;
            coin += streakBonus;
            exp += streakBonus;
            diamond += Math.floor(streakBonus / 10);
        }
    } else if (lastClaimDate && lastClaimDate.toDateString() !== now.toDateString()) {
        // Reiniciar racha si no fue el d√≠a anterior
        streak = 1;
    } else if (!lastClaimDate) {
        // Primera vez
        streak = 1;
    }
    
    user.dailyStreak = streak;
    
    // Construir mensaje de recompensa
    let rewardMessage = `*‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ üéÅ RECOMPENSA DIARIA üéÅ ‚ù±‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ*
*‚îÉ*
*‚îÉ* *üåü ¬°Felicidades, ${name}!*
*‚îÉ* *Has reclamado tu recompensa diaria*
*‚îÉ*
*‚îÉ* *‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ üí∞ RECOMPENSAS üí∞ ‚ù±‚îÅ‚îÅ‚îÅ‚îÅ*
*‚îÉ*
*‚îÉ* *‚ú® Experiencia:* +${exp}
*‚îÉ* *üíé Diamantes:* +${diamond}
*‚îÉ* *üíµ ${moneda}:* +${coin}
*‚îÉ*`;

    // A√±adir informaci√≥n de racha
    rewardMessage += `
*‚îÉ* *‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ üî• RACHA DIARIA üî• ‚ù±‚îÅ‚îÅ‚îÅ‚îÅ*
*‚îÉ*
*‚îÉ* *üìÜ Racha actual:* ${streak} d√≠a${streak !== 1 ? 's' : ''}
*‚îÉ* *‚è∞ Pr√≥xima recompensa:* En 24 horas
*‚îÉ*`;

    // A√±adir evento especial si ocurri√≥
    if (specialEvent) {
        rewardMessage += `
*‚îÉ* *‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ üéâ ¬°EVENTO ESPECIAL! üéâ ‚ù±‚îÅ‚îÅ‚îÅ‚îÅ*
*‚îÉ*
*‚îÉ* *üéä ${specialEvent.name}*
*‚îÉ* *Has recibido bonificaciones adicionales*
*‚îÉ*`;
    }
    
    // A√±adir bonificaci√≥n por nivel
    rewardMessage += `
*‚îÉ* *‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ üìä BONIFICACIONES üìä ‚ù±‚îÅ‚îÅ‚îÅ‚îÅ*
*‚îÉ*
*‚îÉ* *üåü Nivel ${nivel}:* +${Math.floor(multiplier * 100 - 100)}% 
*‚îÉ* ${user.premium ? '*üëë Premium:* +100% bonus' : '*üí° Consejo:* Hazte premium para x2 recompensas'}
*‚îÉ*
*‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ*

*üì¢ Regresa ma√±ana para mantener tu racha*
*üéÆ Usa /nivel para ver tu progreso actual*`;

    conn.reply(m.chat, rewardMessage, m);
}

handler.help = ['daily', 'claim'];
handler.tags = ['rpg'];
handler.command = ['daily', 'diario', 'claim', 'reclamar'];
handler.group = true;
handler.register = true;

export default handler;

function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
        seconds = Math.floor((duration / 1000) % 60),
        minutes = Math.floor((duration / (1000 * 60)) % 60),
        hours = Math.floor((duration / (1000 * 60 * 60)) % 24);

    hours = (hours < 10) ? '0' + hours : hours;
    minutes = (minutes < 10) ? '0' + minutes : minutes;
    seconds = (seconds < 10) ? '0' + seconds : seconds;

    return hours + ' Horas ' + minutes + ' Minutos';
}
